<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Blog]]></title>
  <link href="http://pengfx.github.io/atom.xml" rel="self"/>
  <link href="http://pengfx.github.io/"/>
  <updated>2013-05-06T10:31:17+08:00</updated>
  <id>http://pengfx.github.io/</id>
  <author>
    <name><![CDATA[Peng Feixiang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[draft-korhonen-dmm-prefix-properties-03]]></title>
    <link href="http://pengfx.github.io/blog/2013/05/06/draft-korhonen-dmm-prefix-properties-03/"/>
    <updated>2013-05-06T10:29:00+08:00</updated>
    <id>http://pengfx.github.io/blog/2013/05/06/draft-korhonen-dmm-prefix-properties-03</id>
    <content type="html"><![CDATA[<h1>IPv6 Prefix Mobility Management Properties</h1>

<h3><a href="http://tools.ietf.org/html/draft-korhonen-dmm-prefix-properties-03">draft-korhonen-dmm-prefix-properties-03.txt</a></h3>

<pre><code>这篇规范定义并扩展IPv6邻居发现协议的前缀信息选项，扩展其标志位来描述与前缀相关的移动管理性质。
这篇draft更新了[RFC4861](http://tools.ietf.org/rfc/rfc4861.txt)。
</code></pre>

<hr />

<h2>Background and Motivation</h2>

<ul>
<li>非最优路由</li>
<li>过多的隧道，为了维护移动性相关绑定而增加的信令</li>
<li>集中式的MAG下流量聚合</li>
</ul>


<p>In general, it is observed that most applications do not need IP level mobility, and work just
fine with &#8220;temporary&#8221; IP addresses that come and go. However, IP mobility still has its virtues making the applications unaware of mobility, and certain wireless mobile networking architecture make extensive use of network based IP mobility.</p>

<p>在许多情况下，这可能会导致MN有多个地址被使用，但是其中一些提供了移动性，而另一些没有提供。不得不提供方法来让终端主机区分是否是提供了移动性的地址，还是一些生存期很短并且只能在一个受限的拓扑域使用的地址。</p>

<p><strong>这篇draft提供了IPv6地址管理的扩展以及源地址的选择，这样终端主机（以及它的应用）就能够为它们的需求选择一个合适的地址。</strong></p>

<h2>Option Formats</h2>

<pre><code>'M' 长为1位的标志，描述了前缀的移动性，其性质被定义为：
0 这个前缀没有相关的基于网络的移动性，这个前缀以RFC4861中所提供的方式进行处理。
1 这个前缀提供了基于网络的移动性并且可能保持前缀未改变的有效时间。


'S' 长为1位的标志，它能够提供与使用前缀相关的安全性质的提示。

'Class' 长达14位的前缀分类，这个前缀分类加上了移动性与安全性的补充信息。0被保留，该值没有描述前缀的任何信息。对于未知的分类都将其值置为0。

我们将'M'位、'S'位以及'class’的结合称之为前缀性质。
</code></pre>

<h2>Host Considerations</h2>

<blockquote><p>[I-D.liu-dmm-mobility-api]</p></blockquote>

<h4>内部数据结构</h4>

<p>主机内部数据结构需要被前缀性质信息扩展，这些信息与已学习的前缀及配置地址相关联。关于这一点是如何完成是需要由具体的主机来指定的。一个应用怎样才能够知道或询问到一个地址或一个前缀的移动性也是由具体主机的实现来决定的。一个可能性是通过socket API的扩展来提供这样的信息。（关于这点可以看 <a href="http://tools.ietf.org/id/draft-korhonen-dmm-prefix-properties-03.txt">I-D.liu-dmm-mobility-api</a> 中的讨论）。其它的可能性包括ioctl（）的扩展以及NetLink的扩展。</p>

<h4>默认地址选择</h4>

<p>“前缀性质”提供的信息只能用来作为一种提示。它并不会自动的影响已经存在了的东西<a href="http://tools.ietf.org/rfc/rfc6724.txt">RFC6724</a>，除了稍后将要描述的&#8217;M&#8217;标志位之外。对于主机的策略表来说，一个详细的规则不得不被一个应用或者一些守护进程插入。在可选情况下，一个应用能够通过在<a href="http://tools.ietf.org/id/draft-korhonen-dmm-prefix-properties-03.txt">I-D.liu-dmm-mobility-api</a>中讨论的socket API的扩展来表达地址移动性的优先级，这就意味着库文件或中间件不得不修改策略表或算法。</p>

<blockquote><p>The ’M’ flag defines the prefix preference for an IP stack that
understands the extensions defined in this specification. The IP
stack SHOULD use the following preferences to supersede [RFC6724]
Source Address Selection Rule 8 when selecting a default source
address among multiple choices and an application has not explicitly
indicate what kind of source address it prefers:</p>

<ul>
<li><p>0 Default preference.</p></li>
<li><p>1 Low preference.</p></li>
</ul>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[draft-bernardos-dmm-distributed-anchoring-01]]></title>
    <link href="http://pengfx.github.io/blog/2013/05/06/draft-bernardos-dmm-distributed-anchoring-01/"/>
    <updated>2013-05-06T10:21:00+08:00</updated>
    <id>http://pengfx.github.io/blog/2013/05/06/draft-bernardos-dmm-distributed-anchoring-01</id>
    <content type="html"><![CDATA[<h1>PMIPv6-based distributed anchoring</h1>

<h3><a href="http://tools.ietf.org/html/draft-bernardos-dmm-distributed-anchoring-01">draft-bernardos-dmm-distributed-anchoring-01</a></h3>

<blockquote><p> <a href="http://tools.ietf.org/html/draft-bernardos-dmm-distributed-anchoring-02">draft-bernardos-dmm-distributed-anchoring-02</a> April 8, 2013</p>

<p>02相比01变化很小，可以忽略两者间的差异</p></blockquote>

<p>The draft focuses on the required extensions to effectively support simultaneously anchoring several flows at different distributed gateways.</p>

<hr />

<h2>1.  Introduction</h2>

<p>The main contribution of this draft is the definition of the mechanisms required to support the operation of such a network-based mobility solution when several flows are simultaneously anchored at different D-GWs, by introducing the concept of <strong>Distributed Logical Interface (DLIF)</strong>.</p>

<p>The document also defines the <strong>required PMIPv6 signaling extensions</strong>.</p>

<p> Last, but not least, the solution is also extended to <strong>provide session continuity across different domains</strong>.</p>

<h2>2.  Terminology</h2>

<ul>
<li><p>D-GW (Distributed Gateway).移动节点使用的第一跳IP路由器。它为每一个附加的移动节点提供一个IPv6前缀。</p></li>
<li><p>Anchoring D-GW. 前访问过的锚定一个仍被移动节点使用的IPv6地址前缀的D-GW。</p></li>
<li><p>Serving D-GW.MN当前连接到的D-GW。</p></li>
<li><p>DLIF (Distributed Logical Interface).位于D-GW的IP协议栈的逻辑接口。对于每个活动的由移动节点使用的前缀，Serving D-GW具有DLIF配置（相关联到Anchoring D-GW）。这种方式下，Serving D-GW对每一个MN充当多个路由器，每一个对应到 active Anchoring D-GW。</p></li>
<li>HSS(Home Subscriber Server).3GPP&#8230;.</li>
</ul>


<h2>3.  Solution&#8217;s overview</h2>

<p>当移动节点连接到一个D-GW（初始连接或切换），D-GW作为路由器提供给MN一个IPv6前缀。MN独占前缀。D-GW充当普通路由器。</p>

<p>当移动节点进行切换时，会附加到一个新的D-GW并且由于获得新的地址前缀和锚定到新的服务D-GW，将配置新的IPv6地址。D-GW充当普通路由器。
如果anchoring D-GWs下发的前缀上还有active traffic，或者仅仅是想维持这个前缀的可达，serving D-GW充当MAG，anchoring D-GWs充当LMA。PBU，PBA。隧道。</p>

<p>serving D-GW上获取相关联的anchoring D-GWs超出本文范围。Among the possible mechanisms that can be used to
let the D-GW know about the prefixes that should be kept reachable, we can cite for instance layer-2 triggers/signaling.Regarding the mapping of IPv6 prefixes to anchoring D-GWs, there might be either fully distributed mechanisms in place, or the information can be maintained in a centralized repository (e.g.,in the HSS, using a centralized LMA <a href="http://tools.ietf.org/html/draft-bernardos-dmm-pmip-01">I-D.bernardos-dmm-pmip</a>, etc.).</p>

<pre><code>        +-----+      +-------+      +-------+      +-------------+
        | MN1 |      | D-GW1 |      | D-GW2 |      | CN@Internet |
        +-----+      +-------+      +-------+      +-------------+
           |             |              |                 |
           |  attachment |              |                 |
           |&lt;...........&gt;|              |                 |
           |  prefA::/64 |              |                 |
           |&lt;------------|              |                 |
configures |             |              |                 |
prefA::MN1 |             |              |                 |
           |          (traffic using prefA::MN1)          |
           |&lt;------------|-------------------------------&gt;|
           |             |              |                 |
           |         handover           |                 |
           /............................/                 |
           |             |   prefB::/64 |                 |
           |&lt;---------------------------|                 |
configures |             |         PBU  |                 |
prefB::MN1 |      tunnel |&lt;-------------|                 |
and keeps  |      set-up |  PBA         |                 |
  using    |             |-------------&gt;| tunnel          |
prefA::MN1 |             |              | set-up          |
           |          (traffic using prefB::MN1)          |
           |&lt;---------------------------|----------------&gt;|
           |          (traffic using prefA::MN1)          |
           |             |&lt;------------------------------&gt;|
           |             |&lt;============&gt;|                 |
           |&lt;--------------------------&gt;|                 |
           |             |              |                 |

              Figure 1: Basic operation of the solution
</code></pre>

<h2>4.  Simultaneous anchoring of multiple flows (single operator)</h2>

<pre><code>如何给MN配置多个地址，并使地址具有优先级
</code></pre>

<h2>5.  Simultaneous anchoring of multiple flows (multiple operators)</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git]]></title>
    <link href="http://pengfx.github.io/blog/2013/04/23/git/"/>
    <updated>2013-04-23T13:55:00+08:00</updated>
    <id>http://pengfx.github.io/blog/2013/04/23/git</id>
    <content type="html"><![CDATA[<h1>git 用法简单整理</h1>

<h2>创建 git 仓库</h2>

<h3>1. 初始化 git 仓库</h3>

<pre><code>mkdir project # 创建项目目录
cd project # 进入到项目目录
git init # 初始化 git 仓库。此命令会在当前目录新建一个 .git 目录，用于存储 git 仓库的相关信息
</code></pre>

<h3>2. 初始化提交</h3>

<pre><code>touch README
git add . # 将当前目录添加到 git 仓库中， 使用 git add -A 则是添加所有改动的文档
git commit -m "Initial commit"
git remote add origin git@github.com:pengfx/repo.git # 设置仓库
</code></pre>

<h3>3. 修补提交（修补最近一次的提交而不创建新的提交）</h3>

<pre><code>git commit --amend -m "commit message."
</code></pre>

<h3>4. 提交冲突时可以合并后再推送</h3>

<pre><code>git pull # 获取远程版本库提交与本地提交进行合并
git push # 提交
</code></pre>

<h2>使用别人的仓库</h2>

<pre><code>git clone http://path/to/git.git # clone 的内容会放在当前目录下的新目录
</code></pre>

<h2>将代码从本地回传到仓库</h2>

<pre><code>git push -u origin master
</code></pre>

<h2>使用 git status 查看文件状态</h2>

<pre><code>git status
</code></pre>

<h2>查看提交日志</h2>

<pre><code>git log # 查看提交信息
git log --pretty=oneline # 以整洁的单行形式显示提交信息
git log --stat # 查看提交信息及更新的文件
</code></pre>

<h2>Git 分支</h2>

<pre><code>git branch # 查看分支
git branch 6.x-1.x # 添加分支 6.x-1.x
git branch checkout master # 切换到主分支
git branch -d 6.x-1.x # 删除分支 6.x-1.x
git push origin :branchname # 删除远端分支
</code></pre>

<h2>Git 标签</h2>

<pre><code>git tag # 查看分支
git tag 6.x-1.0 # 添加标签 6.x-1.0
git show 6.x-1.0 # 查看标签 6.x-1.0 的信息
git tag -a 6.x-1.0 965e066 # 为之前提交的信息记录 965e066 加上标签
git push --tags # 提交时带上标签信息
git push origin :/refs/tags/tagname # 删除远端标签
</code></pre>

<h2>从 git 仓库中导出项目</h2>

<pre><code>git archive --format tar --output /path/to/file.tar master # 将 master 以 tar 格式打包到指定文件
</code></pre>

<h2>使用 Git 的一些基本守则</h2>

<p>当要commit/提交patch时：</p>

<ul>
<li><p>使用 git diff &#8211;check 检查行尾有没有多余的空白</p></li>
<li><p>每个 commit 只改一件事情。如果一个文档有多个变更，使用 git add &#8211;patch 只选择文档中的部分变更进入 stage
写清楚 commit message</p></li>
</ul>


<p>参考<a href="http://lugir.com/git-basic.html">lugir.com</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[draft-bernardos-mext-dmm-pmip-01]]></title>
    <link href="http://pengfx.github.io/blog/2013/04/22/draft-bernardos-mext-dmm-pmip-01/"/>
    <updated>2013-04-22T21:04:00+08:00</updated>
    <id>http://pengfx.github.io/blog/2013/04/22/draft-bernardos-mext-dmm-pmip-01</id>
    <content type="html"><![CDATA[<h1>A PMIPv6-based solution for Distributed Mobility Management</h1>

<h3><a href="http://tools.ietf.org/html/draft-bernardos-mext-dmm-pmip-01">draft-bernardos-mext-dmm-pmip-01</a></h3>

<blockquote><p>July 11, 2011</p></blockquote>

<pre><code>本文描述了一种在代理移动IPv6域中分散数据转发平面的解决方案，即试图避免（数据包）经过LMA时所引入的次优数据路径问题。
</code></pre>

<hr />

<h2>1. Introduction</h2>

<p>集中式的移动性解决方案容易出现一些<strong>问题和制约</strong>：更长（次优）的路由路径、可扩展性问题、信令开销（最有可能是一个更长的相关性切换时延）、更复杂的网络部署、由潜在的单点故障引起的更高的脆弱性、移动性管理服务中粒度的缺乏。</p>

<p>本文基于网络的移动性支持来实现DMM。</p>

<h2>2.  Terminology</h2>

<blockquote><p>MAAR (Mobility Anchor and Access Router).移动节点连接的第一跳路由器。它们也负责对它们所匹配的IPv6前缀的移动性管理。</p>

<p>CMD (Central Mobility Database).在移动域中为移动节点存储绑定缓存入口(BCE)的节点</p>

<p>A-MAAR(Anchor MAAR) 。移动节点刚访问过的MAAR，它通告了MN在active flow中使用的IPv6前缀。</p>

<p>S-MAAR (Serving MAAR)。 移动节点现在连接的MAAR。</p></blockquote>

<h2>3.  Description of the solution</h2>

<pre><code>思想：使移动锚点更靠近移动节点，从而克服传统集中式移动性管理的限制
本文中，中央锚点被移动到网络的边缘，部署在移动节点的默认网关中。
也就是说，为一系列的移动节点提供IP连通性的锚点，同时也是这些移动节点的移动性管理者。
</code></pre>

<h4>3.1.  Initial registration</h4>

<p>MAAR像普通路由器一样工作，这样就没有多余的封装和处理产生。</p>

<pre><code> +-----+      +---+                +--+
 |MAAR1|      |CMD|                |CN|
 +-----+      +---+                +*-+
    |           |                   *
   MN           |                   *     +---+
attach detection|               *****    _|CMD|_
    |           |         flow1 *       / +-+-+ \
    |           |               *      /    |    \
    |--- PBU --&gt;|               *     /     |     \
    |           |               *    /      |      \
    |          BCE          +---*-+-'    +--+--+    `+-----+
    |       creation        |   * |      |     |     |     |
    |           |           |MAAR1+------+MAAR2+-----+MAAR3|
    |&lt;-- PBA ---|           |   * |      |     |     |     |
    |           |           +---*-+      +-----+     +-----+
    |           |               *
    |           |         Pref1 *
    |           |              +*-+
    |           |              |MN|
    |           |              +--+

(Operations sequence)                (Packets flow)

             Figure 1: First attachment to the network
</code></pre>

<h4>3.2.  The CMD as PBU/PBA relay</h4>

<p>两个MAAR之间就建立隧道</p>

<pre><code>+-----+      +---+      +-----+           +--+            +--+
|MAAR1|      |CMD|      |MAAR2|           |CN|            |CN|
+-----+      +---+      +-----+           +*-+            +*-+
  |           |           |               *               *
  |           |          MN               *     +---+     *
  |           |        attach.        *****    _|CMD|_    *
  |           |          det.   flow1 *       / +-+-+ \   *flow2
  |           |&lt;-- PBU ---|           *      /    |    \  *
  |          BCE          |           *     /     | *******
  |        check+         |           *    /      | *    \
  |        update         |       +---*-+-'    +--+-*+    `+-----+
  |&lt;-- PBU ---|           |       |   * |      |    *|     |     |
route         |           |       |MAAR1|______|MAAR2+-----+MAAR3|
update        |           |       |   **(______)**  *|     |     |
  |--- PBA --&gt;|           |       +-----+      +-*--*+     +-----+
  |         BCE           |                      *  *
  |        update         |                Pref1 *  *Pref2
  |           |--- PBA --&gt;|                     +*--*+
  |           |         route         ---move--&gt;|*MN*|
  |           |         update                  +----+

     (Operations sequence)                (Packets flow)

         Figure 2: Scenario after a handover, CMD as relay
</code></pre>

<p>当CMD从新的S-MAAR收到第一个PBU后，它向所有的A-MAAR转发PBU的拷贝，这个PBU在BCE中表示为现在的P-CoA(例如切换之前的MAAR)和以前的P-CoA。它们用PBA回复CMD，CMD将这些PBA聚集成一个PBA来通知S-MAAR，这样就最终建立了与A-MAARs之间的隧道。</p>

<h4>3.3.  The CMD as MAAR locator</h4>

<p>允许A-MAAR直接向新的S-MAAR发送信息</p>

<pre><code>+-----+      +---+      +-----+           +--+            +--+
|MAAR1|      |CMD|      |MAAR2|           |CN|            |CN|
+-----+      +---+      +-----+           +*-+            +*-+
  |           |           |               *               *
  |           |          MN               *     +---+     *
  |           |        attach.        *****    _|CMD|_    *
  |           |          det.   flow1 *       / +-+-+ \   *flow2
  |           |&lt;-- PBU ---|           *      /    |    \  *
  |          BCE          |           *     /     | *******
  |        check+         |           *    /      | *    \
  |        update         |       +---*-+-'    +--+-*+    `+-----+
  |&lt;-- PBU ---|           |       |   * |      |    *|     |     |
route         |           |       |MAAR1|______|MAAR2+-----+MAAR3|
update        |           |       |   **(______)**  *|     |     |
  |--------- PBA --------&gt;|       +-----+      +-*--*+     +-----+
  |--- PBA --&gt;|         route                    *  *
  |          BCE        update             Pref1 *  *Pref2
  |         update        |                     +*--*+
  |           |           |           ---move--&gt;|*MN*|
  |           |           |                     +----+

     (Operations sequence)                (Packets flow)

        Figure 3: Scenario after a handover, CMD as locator
</code></pre>

<h4>3.4.  The CMD as PBU/PBA proxy</h4>

<p>CMD在通知A-MAAR位置变化之前，向新的S-MAAR发送PBA</p>

<pre><code>+-----+      +---+      +-----+           +--+            +--+
|MAAR1|      |CMD|      |MAAR2|           |CN|            |CN|
+-----+      +---+      +-----+           +*-+            +*-+
   |           |           |               *               *
   |           |          MN               *     +---+     *
   |           |        attach.        *****    _|CMD|_    *
   |           |          det.   flow1 *       / +-+-+ \   *flow2
   |           |&lt;-- PBU ---|           *      /    |    \  *
   |          BCE          |           *     /     | *******
   |        check+         |           *    /      | *    \
   |        update         |       +---*-+-'    +--+-*+    `+-----+
   |&lt;-- PBU ---x--- PBA --&gt;|       |   * |      |    *|     |     |
route          |         route     |MAAR1|______|MAAR2+-----+MAAR3|
update         |         update    |   **(______)**  *|     |     |
   |--- PBA  -&gt;|           |       +-----+      +-*--*+     +-----+
   |          BCE          |                      *  *
   |         update        |                Pref1 *  *Pref2
   |           |           |                     +*--*+
   |           |           |           ---move--&gt;|*MN*|
   |           |           |                     +----+

     (Operations sequence)                (Packets flow)

         Figure 4: Scenario after a handover, CMD as proxy
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[test clone]]></title>
    <link href="http://pengfx.github.io/blog/2013/04/22/test-clone/"/>
    <updated>2013-04-22T20:46:00+08:00</updated>
    <id>http://pengfx.github.io/blog/2013/04/22/test-clone</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://pengfx.github.io/blog/2013/04/16/hello-world/"/>
    <updated>2013-04-16T17:57:00+08:00</updated>
    <id>http://pengfx.github.io/blog/2013/04/16/hello-world</id>
    <content type="html"><![CDATA[<p>Hello World
你好，世界</p>
]]></content>
  </entry>
  
</feed>
